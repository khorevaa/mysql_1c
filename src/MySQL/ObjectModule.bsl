Перем мСоединение;
Перем мЗапись;
Перем мКоманда;
Перем мТекстЗапроса;
Перем мМассивЗначений;

// Функция возвращает строку, используемую для подключения к базе MySQL
//
Функция ПолучитьСтрокуСоединения()
	
	СтрокаСоединения = "DSN=" + СокрЛП(ODBC) + ";";
	СтрокаСоединения = СтрокаСоединения + "Database=" + СокрЛП(DB) + ";";
	СтрокаСоединения = СтрокаСоединения + "Uid=" + СокрЛП(User) + ";";
	СтрокаСоединения = СтрокаСоединения + "Pwd=" + СокрЛП(Pass) + ";";
	
	Возврат СтрокаСоединения;
	
КонецФункции

// Функцяи создает и возвращает подключение к базе MySQL
//
Функция УстановитьСоединение(ТестовоеПодключение = Ложь, ВыводитьОшибку = Истина) Экспорт
	
	ОписаниеОшибки = "";
	
	ЗапуститьPuTTY();
	
	мСоединение = Новый COMОбъект("ADODB.Connection");
	Попытка
		мСоединение.Open(ПолучитьСтрокуСоединения());
	Исключение				
		ОписаниеОшибки = ОписаниеОшибки + ОписаниеОшибки() + Символы.ПС;
		Если ВыводитьОшибку Тогда
			Сообщить(ОписаниеОшибки);
		КонецЕсли;
		мСоединение = Неопределено;		
	КонецПопытки;	
	
	Если НЕ ТестовоеПодключение Тогда
		СоздатьОбработчикЗаписей();
		СоздатьОбработчикКоманд();
	КонецЕсли;
		
	Возврат (мСоединение <> Неопределено);
	
КонецФункции

// Процедура закрывает существующее подключение к базе MySQL
//
Процедура ЗакрытьСоединение() Экспорт
	
	ОписаниеОшибки = "";
	
	Если мСоединение <> Неопределено Тогда
		ЗакрытьОбработчикЗаписей();
		ЗакрытьОбработчикКоманд();
		мСоединение.Close();
		мСоединение = Неопределено;
	КонецЕсли;
	
	ЗавершитьPuTTY();
	
КонецПроцедуры

// Функция выполняет простые запросы (INSERT, DELETE, UPDATE)
// в базе MySQL
//
Функция ВыполнитьПростойЗапрос(ТекстЗапроса)
	
	КоличествоИзменныхЗаписей = 0;
	
	ОписаниеОшибки = "";
		
	мКоманда.CommandText = ТекстЗапроса;
	мКоманда.CommandType = 1;
	
	Попытка
		мКоманда.Execute(КоличествоИзменныхЗаписей);
	Исключение		
		ОписаниеОшибки = "Не удалось выполнить запрос: " + ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Выполнение переданного или построенного запроса
//
Функция ВыполнитьЗапрос(ТекстЗапроса = Неопределено) Экспорт
	
	ОписаниеОшибки = "";
	
	Если ТекстЗапроса = Неопределено Тогда
		
		Если мМассивЗначений.Количество() = 0 Тогда
			
			Возврат ВыполнитьПростойЗапрос(мТекстЗапроса);
			
		Иначе
			
			Для Каждого ЗначенияЗапроса ИЗ мМассивЗначений Цикл
				
				Если НЕ ВыполнитьПростойЗапрос(СтрЗаменить(мТекстЗапроса, "&VALUES", ЗначенияЗапроса)) Тогда
					Возврат Ложь;	
				КонецЕсли;
				
			КонецЦикла;
			
			Возврат Истина;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ВыполнитьПростойЗапрос(ТекстЗапроса);
		
	КонецЕсли;
	
КонецФункции

// Возвращает список полей для запросов INSERT и REPLACE
// в формате Поле1,Поле2,ПолеN
//
Функция ПолучитьТекстПолейЗапроса(ЗначенияПолей)
	
	Текст = "";

	Поля = ЗначенияПолей;
	Если ТипЗнч(Поля) = Тип("Массив") Тогда
		Поля = ЗначенияПолей[0];
	ИначеЕсли ТипЗнч(Поля) = Тип("ТаблицаЗначений") Тогда
		Колонки = Новый Соответствие();
		Для Каждого Колонка ИЗ Поля.Колонки Цикл
			Колонки[Колонка.Имя] = Истина;
		КонецЦикла;
		Поля = Колонки;
	КонецЕсли;
	
	Для Каждого Обход ИЗ Поля Цикл
		Текст = Текст + Обход.Ключ + ",";
	КонецЦикла;
	
	Возврат Лев(Текст, СтрДлина(Текст) - 1);
	
КонецФункции

// Возвращает текст для UPDATE запроса с именами и значениями полей в виде
// ИмяПоля1=ЗначениеПоля1,ИмяПоля2=ЗначениеПоля2
//
Функция ПолучитьТекстДляЗапросаОбновления(ЗначенияПолей)
	
	Текст = "";
	
	НомерПоля = 0;
	
	Для Каждого Обход ИЗ ЗначенияПолей Цикл		
		
		НомерПоля = НомерПоля + 1;
		
		Текст = Текст + Обход.Ключ + "='" + Обход.Значение + "'";
		
		Если НомерПоля < ЗначенияПолей.Количество() Тогда
			Текст = Текст + "," + Символы.ПС;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Текст;
	
КонецФункции

// Заполняет массив со значениями полей для запросов INSERT и REPLACE
// Массив хранит значения в виде (ЗначенияПоля1,ЗначенияПоля2,ЗначенияПоляN),
// (ЗначенияПоля1,ЗначенияПоля2,ЗначенияПоляN), (ЗначенияПоля1,ЗначенияПоля2,ЗначенияПоляN)
// В массив значения записываются в количестве ЭлементовВОдномЗапросе
// 
Функция ПодготовитьЗначенияЗапроса(ЗначенияПолей, ЭлементовВОдномЗапросе)
	
	Значения = ЗначенияПолей;
	
	Если ТипЗнч(Значения) <> Тип("ТаблицаЗначений") Тогда
	
		Если ТипЗнч(Значения) = Тип("Соответствие") Тогда
			Значения = Новый Массив();
			Значения.Добавить(ЗначенияПолей);
		КонецЕсли;
		
		Текст = "";
		НомерЗначения = 0;
		ВсегоЗначений = Значения.Количество();
		
		Для Каждого Значение ИЗ Значения Цикл
			
			НомерЗначения = НомерЗначения + 1;
			
			Текст = Текст + "(";
			
			ТекстЗначений = "";
			Для Каждого Обход ИЗ Значение Цикл
				ТекстЗначений = ТекстЗначений + "'"	+ Обход.Значение + "',";
			КонецЦикла;
			
			Текст = Текст + Лев(ТекстЗначений, СтрДлина(ТекстЗначений) - 1) + ")";
					
			Если ЭлементовВОдномЗапросе > 0 И НомерЗначения % ЭлементовВОдномЗапросе = 0 Тогда
				мМассивЗначений.Добавить(Текст);
				Текст = "";
			КонецЕсли;
			
			Если НомерЗначения < ВсегоЗначений И ЗначениеЗаполнено(Текст) Тогда
				Текст = Текст + "," + Символы.ПС;
			КонецЕсли;
					
		КонецЦикла;
		
	Иначе
		
		Колонки = Новый Соответствие();
		
		Для Каждого Колонка ИЗ Значения.Колонки Цикл
			Колонки[Колонка.Имя] = Истина
		КонецЦикла;
		
		Текст = "";
		НомерЗначения = 0;
		ВсегоЗначений = Значения.Количество();
		
		Для Каждого Значение ИЗ Значения Цикл
			
			НомерЗначения = НомерЗначения + 1;
			
			Текст = Текст + "(";
			
			ТекстЗначений = "";
			Для Каждого Колонка ИЗ Колонки Цикл
				ТекстЗначений = ТекстЗначений + "'"	+ Значение[Колонка.Ключ] + "',";
			КонецЦикла;
			
			Текст = Текст + Лев(ТекстЗначений, СтрДлина(ТекстЗначений) - 1) + ")";
					
			Если ЭлементовВОдномЗапросе > 0 И НомерЗначения % ЭлементовВОдномЗапросе = 0 Тогда
				мМассивЗначений.Добавить(Текст);
				Текст = "";
			КонецЕсли;
			
			Если НомерЗначения < ВсегоЗначений И ЗначениеЗаполнено(Текст) Тогда
				Текст = Текст + "," + Символы.ПС;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Текст) Тогда
		мМассивЗначений.Добавить(Текст);
	КонецЕсли;
	
КонецФункции

// Возвращает текст запроса, созданного функцией СоздатьЗапрос
//
Функция ТекстЗапроса() Экспорт
	
	Если мМассивЗначений.Количество() = 0 Тогда
		
		Возврат мТекстЗапроса;		
		
	Иначе
		
		ТекстЗначений = "";
		НомерЗначения = 0;
		
		Для Каждого Значения ИЗ мМассивЗначений Цикл
			
			НомерЗначения = НомерЗначения + 1;
			ТекстЗначений = ТекстЗначений + Значения;
			
			Если НомерЗначения < мМассивЗначений.Количество() Тогда
				ТекстЗначений = ТекстЗначений + "," + Символы.ПС; 
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СтрЗаменить(мТекстЗапроса, "&VALUES", ТекстЗначений);
		
	КонецЕсли;
	
КонецФункции

// Создает текст запроса INSERT, REPLACE, UPDATE на основе переданных
// параметров
//
Функция СоздатьЗапрос(ТипЗапроса = "INSERT", ИмяТаблицы, ЗначенияПолей, Условие = "", ЭлементовВОдномЗапросе = 0) Экспорт
	
	ОписаниеОшибки = "";
	
	мМассивЗначений = Новый Массив();
	
	Если ЭлементовВОдномЗапросе = 0 Тогда
		ЭлементовВОдномЗапросе = ЭлементовВЗапросе;
	КонецЕсли;
	
	ТипЗапроса = СокрЛП(ВРЕГ(ТипЗапроса));
	ИмяТаблицы = СокрЛП(ИмяТаблицы);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицы) Тогда
		ОписаниеОшибки = "Не указано имя таблицы";	
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗапроса <> "DELETE" Тогда
		
		Если НЕ ЗначениеЗаполнено(ЗначенияПолей) Тогда
			ОписаниеОшибки = "Не заданы значения полей";
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ЗначенияПолей) <> Тип("Соответствие") 
		   И ТипЗнч(ЗначенияПолей) <> Тип("Структура")
		   И ТипЗнч(ЗначенияПолей) <> Тип("Массив")
		   И ТипЗнч(ЗначенияПолей) <> Тип("ТаблицаЗначений") Тогда
			ОписаниеОшибки = "Значения полей имеют неверный тип";
			Возврат Ложь;
		КонецЕсли;
		
		Если ТипЗапроса = "UPDATE" И (ТипЗнч(ЗначенияПолей) <> Тип("Соответствие") И ТипЗнч(ЗначенияПолей) <> Тип("Структура")) Тогда
			ОписаниеОшибки = "Для данного типа запроса в качестве значений полей можно передавать только соответствие или структуру";
			Возврат Ложь;
		КонецЕсли;
		
		Если ЗначенияПолей.Количество() = 0 Тогда
			ОписаниеОшибки = "Передан пустой список полей";
			Возврат Ложь;
		КонецЕсли;		
					
	КонецЕсли;
		
	Если ТипЗапроса = "INSERT" ИЛИ ТипЗапроса = "REPLACE" Тогда
		
		мТекстЗапроса = ТипЗапроса + " INTO " + ИмяТаблицы + Символы.ПС;
		мТекстЗапроса = мТекстЗапроса + "(" + ПолучитьТекстПолейЗапроса(ЗначенияПолей) + ")" + Символы.ПС;
		мТекстЗапроса = мТекстЗапроса + " VALUES &VALUES" + Символы.ПС;
		
		ПодготовитьЗначенияЗапроса(ЗначенияПолей, ЭлементовВОдномЗапросе);
		
	ИначеЕсли ТипЗапроса = "UPDATE" Тогда
		
		мТекстЗапроса = "UPDATE " + ИмяТаблицы + " SET " + Символы.ПС;
		мТекстЗапроса = мТекстЗапроса + ПолучитьТекстДляЗапросаОбновления(ЗначенияПолей);
		
	ИначеЕсли ТипЗапроса = "DELETE" Тогда
		
		мТекстЗапроса = "DELETE FROM " + ИмяТаблицы;
		
	Иначе
		
		ОписаниеОшибки = "Неизвестный тип запроса";
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗапроса = "UPDATE" ИЛИ ТипЗапроса = "DELETE" Тогда		
		
		Если ЗначениеЗаполнено(Условие) Тогда
			мТекстЗапроса = мТекстЗапроса + Символы.ПС + Условие;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Добавляет текст запроса для выполнения в пакетном режиме
//
Функция ДобавитьЗапрос(Запрос) Экспорт
	
	ТекстЗапроса = СокрЛП(Запрос);
	
	Если Прав(ТекстЗапроса, 1) <> ";" Тогда
		ТекстЗапроса = ТекстЗапроса + ";";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мТекстЗапроса) Тогда
		мТекстЗапроса = мТекстЗапроса + Символы.ПС;
	КонецЕсли;
	
	мТекстЗапроса = мТекстЗапроса + ТекстЗапроса;
	
КонецФункции

// Функция выполняет запрос через Recordset и заполняет таблицу
// значений полученными данными
//
Функция ПолучитьТаблицуЗначенийПоЗапросу(ТекстЗапроса) Экспорт
	
	ОписаниеОшибки = "";
	
	ТаблицаЗначений = Неопределено;
			
	Если мЗапись <> Неопределено Тогда
	
		Попытка                      
			мЗапись.Open(ТекстЗапроса);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Возврат Неопределено
		КонецПопытки;
		
		ТаблицаЗначений = Новый ТаблицаЗначений();
		
		ИменаПолей = Новый Массив();
		Для Каждого Field ИЗ мЗапись.Fields Цикл
			ИменаПолей.Добавить(Field.Name);
			ТаблицаЗначений.Колонки.Добавить(Field.Name);
		КонецЦикла;
			
		Если мЗапись.EOF() И мЗапись.BOF() Тогда
			// Нет записей в запросе
		Иначе			
			
			Попытка
				
				// Считываем информацию из выборки				
				мЗапись.MoveFirst();
				
				Пока НЕ мЗапись.EOF() Цикл
					
					СтрокаТЗ = ТаблицаЗначений.Добавить();
					Для Каждого Поле ИЗ ИменаПолей Цикл						
						СтрокаТЗ[Поле] = мЗапись.Fields.Item(Поле).Value;
					КонецЦикла;
									
					мЗапись.MoveNext();	
					
				КонецЦикла;
														
			Исключение
				
				ОписаниеОшибки = ОписаниеОшибки();
				ТаблицаЗначений = Неопределено
				
			КонецПопытки;
			
		КонецЕсли;
		
		ЗакрытьОбработчикЗаписей();
		
	Иначе
		
		ОписаниеОшибки = "Невозможно выполнить запрос т.к. нет активного соединения";		
		
	КонецЕсли;
	
	Возврат ТаблицаЗначений;
	
КонецФункции

// Функция выполняет запрос через Recordset и заполняет массив
// значений полученными данными
//
Функция ПолучитьМассивЗначенийПоЗапросу(ТекстЗапроса, ИмяПоля = Неопределено) Экспорт
	
	ОписаниеОшибки = "";
	
	МассивЗначений = Неопределено;
			
	Если мЗапись <> Неопределено Тогда
	
		Попытка                      
			мЗапись.Open(ТекстЗапроса);
		Исключение
			ОписаниеОшибки = ОписаниеОшибки();
			Возврат Неопределено
		КонецПопытки;
		
		МассивЗначений = Новый Массив();
		
		Если мЗапись.EOF() И мЗапись.BOF() Тогда
			// Нет записей в запросе
		Иначе			
			
			Попытка
				
				// Считываем информацию из выборки				
				мЗапись.MoveFirst();
				
				Пока НЕ мЗапись.EOF() Цикл					
					Поле = ?(ИмяПоля = Неопределено, 0, ИмяПоля);
					МассивЗначений.Добавить(мЗапись.Fields.Item(Поле).Value);
					мЗапись.MoveNext();						
				КонецЦикла;
														
			Исключение
				
				ОписаниеОшибки = ОписаниеОшибки();
				МассивЗначений = Неопределено
				
			КонецПопытки;
			
		КонецЕсли;
		
		ЗакрытьОбработчикЗаписей();
		
	Иначе
		
		ОписаниеОшибки = "Невозможно выполнить запрос т.к. нет активного соединения";		
		
	КонецЕсли;
	
	Возврат МассивЗначений;
	
КонецФункции

Функция СоздатьЗаписьТаблицыПоСтруктуре(СтруктураДанных) Экспорт
	
	Ошибка = Ложь;
	
	ИмяТаблицы = Неопределено;	
	
	СтруктураДанных.Свойство("ИмяТаблицы", ИмяТаблицы);	
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
			
		Record = New COMОбъект("ADODB.RecordSet");							
		
		Попытка
			
			Record.Open(ИмяТаблицы, мСоединение, 0, 4, 2);									
			Record.AddNew();			
													
			Для Каждого Обход ИЗ СтруктураДанных Цикл
				
				Если Обход.Ключ <> "ИмяТаблицы" Тогда
					
					ЗначениеПоля = Обход.Значение;
					
					Если ТипЗнч(ЗначениеПоля) = Тип("ДвоичныеДанные") Тогда
						
						ВремФайл = ПолучитьИмяВременногоФайла("bin");
						ЗначениеПоля.Записать(ВремФайл);
						
						Stream = Новый COMОбъект("ADODB.Stream");
						Stream.Type = 1; // Bynary data
						Stream.Open();
						
						Попытка
							Stream.LoadFromFile(ВремФайл);
						Исключение
							Ошибка = Истина;
							ОписаниеОшибки = "Не получить двоичные данные для записи:" + Символы.ПС + ОписаниеОшибки();
						КонецПопытки;
						
						Если НЕ Ошибка Тогда
							Record.Fields(Обход.Ключ).Value = Stream.Read();
							Stream.Close();										
						КонецЕсли;
						
						Stream = Неопределено;
						
					ИначеЕсли ТипЗнч(ЗначениеПоля) <> Тип("Число") Тогда
						
						Record.Fields(Обход.Ключ).Value = Строка(ЗначениеПоля);
						
					Иначе
						
						Record.Fields(Обход.Ключ).Value = ЗначениеПоля;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;						
			
			Record.UpdateBatch();
			Record.Close();
						
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			Ошибка = Истина;
			
		КонецПопытки;
							
	Иначе
		
		ОписаниеОшибки = "Не задано имя таблицы";		
		Ошибка = Истина;
		
	КонецЕсли;
	
	Возврат НЕ Ошибка;
	
КонецФункции

// Функция выполняет проверку соединения с базой MySQL
// Возвращает Истина в случае успешного соединения
// Ложь - если соединение не было установлено
//
Функция ВыполнитьТестовоеПодключение(ВыводитьОшибку = Истина) Экспорт
	
	ОписаниеОшибки = "";
	
	ПодключениеСоздано = УстановитьСоединение(ВыводитьОшибку);
		
	ЗакрытьСоединение();	
	
	Возврат ПодключениеСоздано;
		
КонецФункции

// Функция возвращает объект "ADODB.Recordset",
// связанный с текущим соединением
//
Функция ПолучитьОбработчикЗаписей()
	
	Если мСоединение <> Неопределено Тогда
		Recordset	= Новый COMОбъект("ADODB.Recordset");
		Recordset.ActiveConnection = мСоединение;
		Возврат Recordset;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
			
КонецФункции

// Создает глобальный объект "ADODB.Recordset",
// связанный с текущим соединением
//
Функция СоздатьОбработчикЗаписей()
	
	мЗапись = ПолучитьОбработчикЗаписей();
			
КонецФункции

// Закрывает объект "ADODB.Recordset"
//
Функция ЗакрытьОбработчикЗаписей()
	
	Попытка
		мЗапись.Close();
	Исключение			
	КонецПопытки;			
	
КонецФункции

// Функция возвращает объект "ADODB.Command",
// связанный с текущим соединением
//
Функция ПолучитьОбработчикКоманд()
	
	Если мСоединение <> Неопределено Тогда
		Command	= Новый COMОбъект("ADODB.Command");
		Command.ActiveConnection = мСоединение;
		Возврат Command;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
КонецФункции

// Создает глобальный объект "ADODB.Command",
// связанный с текущим соединением
//
Функция СоздатьОбработчикКоманд()
	
	мКоманда = ПолучитьОбработчикКоманд();	
			
КонецФункции

// Закрывает объект "ADODB.Command"
//
Функция ЗакрытьОбработчикКоманд()
		
	мКоманда = Неопределено;	
	
КонецФункции

// Проверка реквизитов перед подключением
//
Функция РеквизитыСоединенияЗаполнены() Экспорт
	
	ОписаниеОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(ODBC) Тогда		
		ОписаниеОшибки = "Не указано имя источника ODBC";
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(DB) Тогда		
		ОписаниеОшибки = "Не указано имя базы данных";				
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(User) Тогда		
		ОписаниеОшибки = "Не указано имя пользователя";				
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Pass) Тогда		
		ОписаниеОшибки = "Не указан пароль пользователя";
		//Возврат Ложь;
	КонецЕсли;
	
	Если ИспользоватьPutty Тогда
		
		Если НЕ ЗначениеЗаполнено(Putty) Тогда		
			ОписаниеОшибки = "Не указан путь к программе plink";						
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Name_put) Тогда		
			ОписаниеОшибки = "Не указано имя настройки PuTTY";						
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(User_put) Тогда		
			ОписаниеОшибки = "Не указано имя пользователя PuTTY";						
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Pass_put) Тогда		
			ОписаниеОшибки = "Не указано пароль пользователя PuTTY";						
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Запуск putty
//
Процедура ЗапуститьPuTTY()
	
	Если ИспользоватьPutty Тогда
		
		Если Задержка_put = 0 Тогда
			Задержка_put = 5;
		КонецЕсли;
		
		ЗапуститьПриложение(Putty + " -load " + Name_put + " -l " + User_put + " -pw " + Pass_put);
		
		ТекДата = ТекущаяДата();
		Пока ТекущаяДата() - ТекДата < Задержка_put Цикл
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Закрытие putty
//
Процедура ЗавершитьPuTTY()
	
	Если ИспользоватьPutty Тогда
		ЗапуститьПриложение("taskkill /IM plink.exe");
	КонецЕсли;
	
КонецПроцедуры

// Установка параметров соединения
//
Процедура Инициализация(ИмяODBC, ИмяБазы, ИмяПользователя, Пароль) Экспорт
	
	ОписаниеОшибки = "";
	мМассивЗначений = Новый Массив();
	мТекстЗапроса = "";
	
	ODBC = СокрЛП(ИмяODBC);
	DB	 = СокрЛП(ИмяБазы);
	User = СокрЛП(ИмяПользователя);
	Pass = СокрЛП(Пароль);
	
КонецПроцедуры

// Очищает текст запроса
//
Процедура ОчиститьТекстЗапроса() Экспорт
	
	мТекстЗапроса = "";	
	
КонецПроцедуры

мМассивЗначений = Новый Массив();
мТекстЗапроса = "";